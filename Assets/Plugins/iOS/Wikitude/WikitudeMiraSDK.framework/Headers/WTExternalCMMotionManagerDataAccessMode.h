//
//  WTExternalCMMotionManagerDataAccessMode.h
//  WikitudeCoreServices
//
//  Created by Andreas Schacherbauer on 03.05.17.
//  Copyright Â© 2017 Wikitude. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <CoreMotion/CMAttitude.h>

#import "WTWikitudeTypes.h"


NS_ASSUME_NONNULL_BEGIN

@class CMDeviceMotion;
@class CMAccelerometerData;
@class CLHeading;

/**
 * WTExternalCMMotionManagerDataAccessMode defines a common interface to forward CMMotionManager data into the Wikitude SDK.
 *
 * @discussion Do not use this class directly but only it's derived classes.
 */
@interface WTExternalCMMotionManagerDataAccessMode : NSObject

/**
 * @brief use this method to determine which CMAttitudeReferenceFrame is required for the given Wikitude SDK features
 *
 * @param requiredFeatures Based on the required features, a different reference frame might be required
 */
+ (CMAttitudeReferenceFrame)requiredAttitudeReferenceFrameForFeatures:(WTFeatures)requiredFeatures;

@end


/**
 * WTExternalCMMotionManagerDataAccessModePullDelegate defines optional methods that are used from the SDK to get the most recent sensor values.
 */
@protocol WTExternalCMMotionManagerDataAccessModePullDelegate <NSObject>

@optional
/**
 * @brief this method is called in case the current device is capable of delivering device motion data
 * This method is called in case the device returns YES for the CMMotionManager property `deviceMotionAvailable` and the CMMotionManager property `availableAttitudeReferenceFrames` contains the reference frame that was returned from the WTExternalCMMotionManagerDataAccessMode class method `+requiredAttitudeReferenceFrameForFeatures:`
 *
 * A typical implementation looks like this:
 *
 * - (CMDeviceMotion *)currentDeviceMotion
 * {
 *     return self.externalMotionManager.deviceMotion;
 * }
 *
 */
- (CMDeviceMotion *)currentDeviceMotion;

/**
 * @brief this method is called in case the current device is not capable of delivering device motion data
 *
 * A typical implementation looks like this:
 *
 * - (CMAccelerometerData *)currentAccelerometerData
 * {
 *     return self.externalMotionManager.accelerometerData;
 * }
 *
 */
- (CMAccelerometerData *)currentAccelerometerData;

/**
 * @brief this method is called in case the current device is not capable of delivering device motion data or is running iOS 10.0.x until iOS 10.1.0
 *
 * It's implementation is supposed to return the heading that is available from the CLLocationManager class.
 */
- (CLHeading *)currentHeading;

@end


/**
 * @brief Use this concrete WTExternalCMMotionManagerDataAccessMode subclass to inject CMMotionManager data in case the CMMotionManager is configured to start updates without a block handler.
 */
@interface WTExternalCMMotionManagerDataAccessModePull : WTExternalCMMotionManagerDataAccessMode

/**
 * @brief This interval defines how often the delegate is called
 * 
 * @default 30 Hz
 */
@property (nonatomic, assign) NSTimeInterval    internalDelegateUpdateInterval;

/**
 * @brief the initializer that should be used to create object of this class
 *
 * @param dataAccessDelegate the delegate that implements the WTExternalCMMotionManagerDataAccessModePullDelegate protocol
 */
- (instancetype)initWithDataAccessDelegate:(id<WTExternalCMMotionManagerDataAccessModePullDelegate>)dataAccessDelegate;

@end


/**
 * @brief Use this concrete WTExternalCMMotionManagerDataAccessMdde subclass to inject CMMotionManager data in case the CMMotionManager is configured to start updates to a block handler.
 */
@interface WTExternalCMMotionManagerDataAccessModePush : WTExternalCMMotionManagerDataAccessMode

/**
 * @brief call this method in your implementation of CMMotionManager -startDeviceMotionUpdatesToQueue:withHandler:
 *
 * @param deviceMotion the device motion object generated by core motion
 */
- (void)deviceMotionUpdateAvailable:(CMDeviceMotion *)deviceMotion;

/**
 * @brief call this method in in your implementation of CMMotionManger startAccelerometerUpdatesToQueue:withHandler:
 *
 * @discussion This method only needs to be called in case the CMMotionManger property `deviceMotionAvailable` returns NO
 *
 * @param accelerometerData the accelerometer data object generated by core motion
 */
- (void)accelerometerDataUpdateAvailable:(CMAccelerometerData *)accelerometerData;

/**
 * @brief call this method in your implementation of CLLocationManagerDelegate -locationManager:didUpdateHeading:
 *
 * @discussion This method only needs to be called in case the CMMotionManager property `devcieMotionAvailable` returns NO or the iOS version is 10.0.x
 *
 * @param heading the heading object generated by core location
 */
- (void)headingUpdateAvailable:(CLHeading *)heading;

@end

NS_ASSUME_NONNULL_END
